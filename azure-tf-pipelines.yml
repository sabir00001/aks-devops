trigger:
- master
#Define variables 
variables:
- name: environment
  value: prod
pool:
  vmImage: ubuntu-latest

# AGENT VM IMAGE
name: devops-agent-01

stages:
  - stage: TerraformValidate
    pool:
     name: devops-agent-01
    jobs:
      - job: TerraformValidate
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish-Artifact
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/aks-terraform'
            artifact: 'aks-terraform-artifacts'
            publishLocation: 'pipeline'
        - task: TerraformCLI@2
          displayName: Terraform-init
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
            backendType: 'azurerm'
            backendServiceArm: 'azure-learn'
            backendAzureRmSubscriptionId: '9734dba5-b9e0-4249-9973-b3fb22b06d24'
            backendAzureRmResourceGroupName: 'aks-rg-acr'
            backendAzureRmStorageAccountName: 'maftfbackend'
            backendAzureRmContainerName: 'prod-tfstatefile'
            backendAzureRmKey: 'terraform-prod.tfstate'
            allowTelemetryCollection: false
        - task: TerraformCLI@2
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
            allowTelemetryCollection: false
        
  - stage: DeployAKSCluster
    jobs:
      - deployment: DeployAKSCluster
        displayName: DeployAKSCluster
        continueOnError: false
        pool:
          name: devops-agent-01
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
            
                - task: DownloadSecureFile@1
                  displayName: Dwonload-SSHKEY
                  name: sshkey
                  inputs:
                    secureFile: 'aksprodsshkey.pub'

                - task: TerraformCLI@2
                  displayName: Terraform-init
                  inputs:
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/aks-terraform-artifacts'
                    backendType: 'azurerm'
                    backendServiceArm: 'azure-learn'
                    backendAzureRmSubscriptionId: '9734dba5-b9e0-4249-9973-b3fb22b06d24'
                    backendAzureRmResourceGroupName: 'aks-rg-acr'
                    backendAzureRmStorageAccountName: 'maftfbackend'
                    backendAzureRmContainerName: 'prod-tfstatefile'
                    backendAzureRmKey: 'terraform-prod.tfstate'
                    allowTelemetryCollection: false
                - task: TerraformCLI@2
                  displayName: Terraform-plan
                  inputs:
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/aks-terraform-artifacts'
                    environmentServiceName: 'azure-learn'
                    providerAzureRmSubscriptionId: '9734dba5-b9e0-4249-9973-b3fb22b06d24'
                    commandOptions: '-var environment=$(environment)'
                    allowTelemetryCollection: false
                    publishPlanResults: '$(environment)-result'
                - task: TerraformCLI@2
                  displayName: Terraform-apply
                  inputs:
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/aks-terraform-artifacts'
                    environmentServiceName: 'azure-learn'
                    providerAzureRmSubscriptionId: '9734dba5-b9e0-4249-9973-b3fb22b06d24'
                    runAzLogin: true
                    allowTelemetryCollection: false
                      
                        
                