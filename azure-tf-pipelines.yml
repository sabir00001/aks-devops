trigger:
- master
#Define variables 
variables:
- name: environment
  value: prod
pool:
  vmImage: ubuntu-latest

# AGENT VM IMAGE
#name: devops-agent-01

stages:
  - stage: TerraformValidate
    #pool:
     #name: devops-agent-01
    jobs:
      - job: TerraformValidate
        continueOnError: false
        steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish-Artifact
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/aks-terraform'
            artifact: 'aks-terraform-artifacts'
            publishLocation: 'pipeline'
        - task: TerraformCLI@2
          displayName: Terraform-init
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
            backendType: 'azurerm'
            backendServiceArm: 'azure-practice'
            backendAzureRmSubscriptionId: 'a45d12c7-47d5-4728-b6eb-7f21d3deef39'
            ensureBackend: true
            backendAzureRmResourceGroupName: 'rg-sabir-acr'
            backendAzureRmStorageAccountName: 'stgsabirerraform'
            backendAzureRmContainerName: 'prod-tfstatefile'
            backendAzureRmKey: 'terraform-prod.tfstate'
            allowTelemetryCollection: false
        - task: TerraformCLI@2
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
            allowTelemetryCollection: false
        
  - stage: DeployAKSCluster
    jobs:
      - deployment: DeployAKSCluster
        displayName: DeployAKSCluster
        continueOnError: false
        #pool:
          #name: devops-agent-01
      
        environment: $(environment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadSecureFile@1
                  displayName: Dwonload-SSHKEY
                  name: sshkey
                  inputs:
                    secureFile: 'aksprodsshkey.pub'

                - task: TerraformCLI@2
                  displayName: Terraform-init
                  inputs:
                    command: 'init'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
                    backendType: 'azurerm'
                    backendServiceArm: 'azure-practice'
                    backendAzureRmSubscriptionId: 'a45d12c7-47d5-4728-b6eb-7f21d3deef39'
                    ensureBackend: true
                    backendAzureRmResourceGroupName: 'rg-sabir-acr'
                    backendAzureRmStorageAccountName: 'stgsabirerraform'
                    backendAzureRmContainerName: 'prod-tfstatefile'
                    backendAzureRmKey: 'terraform-prod.tfstate'
                    allowTelemetryCollection: false
                - task: TerraformCLI@2
                  displayName: Terraform-plan
                  inputs:
                    command: 'plan'
                    workingDirectory: '$(Pipeline.Workspace)/aks-terraform-artifacts'
                    environmentServiceName: 'azure-practice'
                    providerAzureRmSubscriptionId: 'a45d12c7-47d5-4728-b6eb-7f21d3deef39'
                    commandOptions: '-var environment=$(environment)'
                    allowTelemetryCollection: false
                    publishPlanResults: '$(environment)-result'
                - task: TerraformCLI@2
                  displayName: Terraform-apply
                  inputs:
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/aks-terraform-artifacts'
                    environmentServiceName: 'azure-practice'
                    providerAzureRmSubscriptionId: 'a45d12c7-47d5-4728-b6eb-7f21d3deef39'
                    allowTelemetryCollection: false

  - stage: approveDestroyAks
    jobs:
      - job: approveDestroyAks
        displayName: approve to derstoy tf
        pool: server
        steps:   
        - task: ManualValidation@0
          timeoutInMinutes: 30 # task times out in 1 day
          inputs:
              notifyUsers: |
                  someone@example.com
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'reject'
                      
  - stage: DestroyAKSCluster
    jobs:
    - job: DestroyAKSCluster
      displayName: DestroyAKSCluster
      continueOnError: false
     # pool:
       # name: devops-agent-01
      steps:

      - task: TerraformCLI@2
        displayName: Terraform-init
        inputs:
          command: 'init'
          workingDirectory: '$(Pipeline.Workspace)/aks-terraform-artifacts'
          backendType: 'azurerm'
          backendServiceArm: 'azure-practice'
          backendAzureRmSubscriptionId: 'a45d12c7-47d5-4728-b6eb-7f21d3deef39'
          backendAzureRmResourceGroupName: 'rg-sabir-acr'
          backendAzureRmStorageAccountName: 'stgsabirerraform'
          backendAzureRmContainerName: 'prod-tfstatefile'
          backendAzureRmKey: 'terraform-prod.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@2
        displayName: Terraform-plan
        inputs:
          command: 'plan'
          workingDirectory: '$(Pipeline.Workspace)/aks-terraform-artifacts'
          environmentServiceName: 'azure-practice'
          providerAzureRmSubscriptionId: 'a45d12c7-47d5-4728-b6eb-7f21d3deef39'
          commandOptions: '-var environment=$(environment)'
          allowTelemetryCollection: false
          publishPlanResults: '$(environment)-result'

      - task: TerraformCLI@2
        inputs:
          command: 'destroy'
          environmentServiceName: 'azure-practice'
          providerAzureRmSubscriptionId: 'a45d12c7-47d5-4728-b6eb-7f21d3deef39'
          allowTelemetryCollection: true
            
           
      
          
                        